"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[87],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),d=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(a.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=i,b=c["".concat(a,".").concat(m)]||c[m]||u[m]||s;return n?r.createElement(b,o(o({ref:t},p),{},{components:n})):r.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=m;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<s;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},163:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const s={sidebar_position:1},o="System Installer",l={unversionedId:"system/blend_inst",id:"system/blend_inst",title:"System Installer",description:"blendOS has implemented its own installer framework, blend-inst, written in Python. It's inspired by Crystal Linux's jade installer, which is written in Rust, but unlike it, blend-inst uses the squashfs provided by the live ISO, and doesn't bootstrap a whole new Arch installation, in a speedy installation time of around 2-3 minutes with a decent internet connection (tested with a 400Mbps internet connection in Bangalore, India).",source:"@site/docs/system/blend_inst.md",sourceDirName:"system",slug:"/system/blend_inst",permalink:"/blend-docs/docs/system/blend_inst",draft:!1,editUrl:"https://github.com/blend-os/docs/tree/main/docs/system/blend_inst.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",previous:{title:"System (for developers)",permalink:"/blend-docs/docs/category/system-for-developers"},next:{title:"Architecture",permalink:"/blend-docs/docs/system/architecture"}},a={},d=[{value:"Stages",id:"stages",level:2},{value:"Partition",id:"partition",level:3},{value:"Base setup",id:"base-setup",level:3},{value:"Install bootloader",id:"install-bootloader",level:3},{value:"Setup locales",id:"setup-locales",level:3},{value:"Setup networking",id:"setup-networking",level:3},{value:"Add users",id:"add-users",level:3},{value:"Sample config",id:"sample-config",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"system-installer"},"System Installer"),(0,i.kt)("p",null,"blendOS has implemented its own installer framework, ",(0,i.kt)("inlineCode",{parentName:"p"},"blend-inst"),", written in Python. It's inspired by Crystal Linux's ",(0,i.kt)("inlineCode",{parentName:"p"},"jade")," installer, which is written in Rust, but unlike it, ",(0,i.kt)("inlineCode",{parentName:"p"},"blend-inst")," uses the squashfs provided by the live ISO, and doesn't bootstrap a whole new Arch installation, in a speedy installation time of around 2-3 minutes with a decent internet connection (tested with a 400Mbps internet connection in Bangalore, India)."),(0,i.kt)("h2",{id:"stages"},"Stages"),(0,i.kt)("h3",{id:"partition"},"Partition"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Keys used"),": ","['partition']")),(0,i.kt)("h3",{id:"base-setup"},"Base setup"),(0,i.kt)("p",null,"XXX: Complete this section."),(0,i.kt)("h3",{id:"install-bootloader"},"Install bootloader"),(0,i.kt)("p",null,"XXX: Complete this section."),(0,i.kt)("h3",{id:"setup-locales"},"Setup locales"),(0,i.kt)("p",null,"XXX: Complete this section."),(0,i.kt)("h3",{id:"setup-networking"},"Setup networking"),(0,i.kt)("p",null,"XXX: Complete this section."),(0,i.kt)("h3",{id:"add-users"},"Add users"),(0,i.kt)("p",null,"XXX: Complete this section."),(0,i.kt)("h2",{id:"sample-config"},"Sample config"),(0,i.kt)("p",null,"Here's the type of configuration ",(0,i.kt)("inlineCode",{parentName:"p"},"blend-inst")," expects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "partition": {\n        "device": "/dev/randomdisk",\n        "mode": "Auto",\n        "efi": true,\n        "partitions": [\n            "none:/dev/randomdisk1:don\'t format"\n        ]\n    },\n    "bootloader": {\n        "type": "grub-efi",\n        "location": "/boot/efi"\n    },\n    "locale": {\n        "locale": [\n            "en_US.UTF-8 UTF-8"\n        ],\n        "keymap": "us",\n        "timezone": "GMT"\n    },\n    "networking": {\n        "hostname": "blend",\n        "ipv6": false\n    },\n    "users": [\n        {\n            "name": "user",\n            "password": "SOME_PLAINTEXT_PASSWORD",\n            "shell": "bash"\n        }\n    ],\n    "flatpak": true,\n    "kernel": "linux"\n}\n')))}u.isMDXComponent=!0}}]);